Documentation for matrix_divided

       >>> matrix_divided = __import__("2-matrix_divided").matrix_divided
       >>> matrix = [[1, 2, 3], [4, 5, 6]]

Test Correct Divison

	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> matrix_divided(matrix, 30)
	[[0.03, 0.07, 0.1], [0.13, 0.17, 0.2]]

	>>> matrix_divided(matrix, 300)
	[[0.0, 0.01, 0.01], [0.01, 0.02, 0.02]]

	>>> matrix_divided(matrix, 3000)
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

	>>> matrix_divided([[3]], 3)
	[[1.0]]

	>>> matrix_divided(matrix, -1)
	[[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

	>>> matrix_divided([[-3, 1, -5]], -5)
	[[0.6, -0.2, 1.0]]

	>>> matrix_divided([[1, .2, 3]], 3)
	[[0.33, 0.07, 1.0]]

Errors

	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

	>>> matrix_divided(matrix, "Mazinger")
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> matrix_divided(matrix, [1,1,1])
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> matrix_divided([[1,2,3],[5,6]], 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

	>>> matrix_divided([[1],[2,3,4]], 23)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size
	
	>>> matrix_divided([], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[1,2,3],(1,3)], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
