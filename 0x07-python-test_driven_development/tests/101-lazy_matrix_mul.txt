Doc and tests for 101-matrix_mul

print_square prints a equal sized square

	matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

	>>> print_square = __import__("101-lazy_matrix_mul").lazy_matrix_mul_mul
	>>> module_doc = __import__("101-lazy_matrix_mul").__doc__
	>>> print(len(module_doc) > 0)
	True

	>>> func_doc = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
	>>> print(len(func_doc) > 0)
	True

simple ints
	
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	[[13, 16]]

errors
	>>> matrix_mul("Thingers", [[3, 4],[2, 1]])
	Traceback (most recent call last):
	TypeError: m_a must be a list

	>>> matrix_mul([1,2],[2,3]], [4,6])
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

	>>> matrix_mul([],[[1,2]])
	Traceback (most recent call last):
	TypeError: m_a can't be empty

	>>> matrix_mul([[1, "X", 2], [1, 2, 3]], [[1, 3, 3], [1, 2, 3]])
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[1,2],[1]], [[1], [2]])
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size
	>>> matrix_mul([[1,2], [2, 1]], [[1,]])
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied

	>>> matrix_mul([[3, 4]])
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
	
	
